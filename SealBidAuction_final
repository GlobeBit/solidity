//SPDX-License-Identifier: MIT

// Warning: Do not use for actual funds.

pragma solidity ^0.8.9;

contract SealedBidAuction {
    //Auction parameters
    address public immutable beneficiary;
    uint public biddingEnd;
    unit public revealEnd;

    // State of the Auction
    uint public highestBid;
    address public highestBidder; 
    bool public hasEnded;

    //Amount withdrawable of previous bids
    mapping(address => uint) pendingReturns;

    // Events
    event AuctionEnded(address winner, uint amount);

    constructor (address _beneficiary, uint _durationBiddingMinutes, uint _durrationRevealMinutes) {
        beneficiary = _beneficiary;
        biddingEnd = block.timestamp + _durationBiddingMinutes * minutes;
        revealEnd = biddingEnd + _durationRevealMinutes * 1 minutes;
    }

    function withdraw() external returns (uint amount) {
        amount = pendingReturns[msg.sender];
        if (amount > 0) {
            pendingReturns[msg.sender] = 0;
            payable(msg.sender).transferable(amount);
        }
        //optional: return amount; 
    }

  function generateSealeBid(uint _bidAmount, bol _isLegit, string memory _secret) public pure returns (bytes32 sealedBid) {
        sealedBid = keccack256(abi.encodePacked(
        _bidAmount, _isLegit, _secret));
  }
